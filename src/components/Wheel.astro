---
---

<div id="wheelContainer" class="relative w-full max-w-[400px] aspect-square mx-auto">
  <canvas
    id="wheelCanvas"
    class="w-full h-full hidden"
  ></canvas>
  <div id="emptyWheel" class="w-full h-full bg-white rounded-lg shadow-lg flex items-center justify-center p-6">
    <p class="text-xl text-gray-600 text-center">Add options to start spinning the wheel!</p>
  </div>
  <button
    id="spinButton"
    class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white text-purple-500 font-bold p-2 sm:p-4 w-12 h-12 sm:w-16 sm:h-16 rounded-full shadow-lg flex items-center justify-center transition-all duration-300 hover:bg-purple-600 hover:text-white focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-opacity-75 active:translate-y-0.5 active:shadow-inner group"
    aria-label="Spin the wheel"
  >
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-6 h-6 sm:w-8 sm:h-8 transition-transform duration-300 group-hover:scale-110">
      <path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.3"/>
    </svg>
  </button>
  <div id="indicator" class="absolute right-0 top-1/2 transform translate-x-1/2 -translate-y-1/2 hidden">
    <div class="w-0 h-0 border-t-[10px] sm:border-t-[15px] border-t-transparent border-b-[10px] sm:border-b-[15px] border-b-transparent border-r-[20px] sm:border-r-[30px] border-r-white"></div>
  </div>
</div>

<div id="winnerPopup" class="fixed inset-0 flex items-center justify-center hidden">
  <div class="absolute inset-0 bg-black bg-opacity-30 backdrop-blur-sm"></div>
  <div class="relative bg-white bg-opacity-70 backdrop-blur-md p-6 sm:p-8 rounded-lg shadow-xl w-11/12 max-w-md sm:w-3/4 md:w-9/10 z-10 border-4 border-white">
    <div class="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white px-3 py-1 sm:px-4 sm:py-2 rounded-full shadow-md">
      <span class="text-lg sm:text-xl font-bold text-purple-600">WINNER</span>
    </div>
    <p id="winnerText" class="text-2xl sm:text-4xl md:text-6xl font-bold text-center break-words"></p>
  </div>
</div>

<script>
  const wheelContainer = document.getElementById('wheelContainer');
  const wheelCanvas = document.getElementById('wheelCanvas');
  const emptyWheel = document.getElementById('emptyWheel');
  const spinButton = document.getElementById('spinButton');
  const indicator = document.getElementById('indicator');
  const winnerPopup = document.getElementById('winnerPopup');
  const winnerText = document.getElementById('winnerText');
  const ctx = wheelCanvas.getContext('2d');

  let items = [];
  let isSpinning = false;
  let lastOptionIndex = -1;
  let longestOption = '';

  const winnerSound = new Audio('/winner.ogg');
  winnerSound.load();

  const optionSound = new Audio('/option.ogg');
  optionSound.volume = 0.25; // Set volume to 25%
  optionSound.load();

  function calculateFontSize(text, maxWidth, maxFontSize) {
    ctx.font = `bold ${maxFontSize}px Arial`;
    let fontSize = maxFontSize;
    while (ctx.measureText(text).width > maxWidth && fontSize > 8) {
      fontSize--;
      ctx.font = `bold ${fontSize}px Arial`;
    }
    return fontSize;
  }

  function drawWheel(rotationAngle = 0) {
    if (items.length === 0) {
      wheelCanvas.classList.add('hidden');
      emptyWheel.classList.remove('hidden');
      spinButton.classList.add('hidden');
      indicator.classList.add('hidden');
      return;
    }

    wheelCanvas.classList.remove('hidden');
    emptyWheel.classList.add('hidden');
    spinButton.classList.remove('hidden');
    indicator.classList.remove('hidden');

    const centerX = wheelCanvas.width / 2;
    const centerY = wheelCanvas.height / 2;
    const radius = Math.min(centerX, centerY) - 10;

    ctx.clearRect(0, 0, wheelCanvas.width, wheelCanvas.height);

    ctx.save();
    ctx.translate(centerX, centerY);
    ctx.rotate(rotationAngle);
    ctx.translate(-centerX, -centerY);

    const maxWidth = radius - 20;
    const maxFontSize = Math.min(18, radius / 10);
    const fontSize = calculateFontSize(longestOption, maxWidth, maxFontSize);

    items.forEach((item, index) => {
      const startAngle = (index / items.length) * 2 * Math.PI;
      const endAngle = ((index + 1) / items.length) * 2 * Math.PI;

      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.arc(centerX, centerY, radius, startAngle, endAngle);
      ctx.closePath();

      const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, radius);
      gradient.addColorStop(0, `hsl(${index * 360 / items.length}, 100%, 80%)`);
      gradient.addColorStop(1, `hsl(${index * 360 / items.length}, 100%, 50%)`);
      ctx.fillStyle = gradient;
      ctx.fill();

      ctx.save();
      ctx.translate(centerX, centerY);
      ctx.rotate((startAngle + endAngle) / 2);
      ctx.textAlign = 'right';
      ctx.fillStyle = 'white';
      ctx.font = `bold ${fontSize}px Arial`;
      
      // Text wrapping
      const words = item.split(' ');
      let line = '';
      let y = -fontSize / 2;
      const lineHeight = fontSize * 1.2;
      
      for (let n = 0; n < words.length; n++) {
        const testLine = line + words[n] + ' ';
        const metrics = ctx.measureText(testLine);
        const testWidth = metrics.width;
        if (testWidth > maxWidth && n > 0) {
          ctx.fillText(line, radius - 10, y);
          line = words[n] + ' ';
          y += lineHeight;
        }
        else {
          line = testLine;
        }
      }
      ctx.fillText(line, radius - 10, y);
      
      ctx.restore();
    });

    ctx.restore();

    // Draw center circle
    ctx.beginPath();
    ctx.arc(centerX, centerY, radius / 8, 0, 2 * Math.PI);
    ctx.fillStyle = 'white';
    ctx.fill();

    // Check if the option has changed and play the sound
    const currentOptionIndex = items.length - 1 - Math.floor((rotationAngle / (2 * Math.PI)) % 1 * items.length);
    if (currentOptionIndex !== lastOptionIndex) {
      playOptionSound();
      lastOptionIndex = currentOptionIndex;
    }
  }

  function easeOutQuart(t) {
    return 1 - Math.pow(1 - t, 4);
  }

  function spinWheel() {
    if (isSpinning || items.length === 0) return;

    isSpinning = true;
    spinButton.disabled = true;

    // Random spin parameters
    const minSpinTime = 5000;
    const maxExtraTime = 5000;
    const totalSpinTime = minSpinTime + Math.random() * maxExtraTime;
    
    const minRotations = 5;
    const maxExtraRotations = 10;
    const totalRotations = minRotations + Math.random() * maxExtraRotations;

    const startTime = Date.now();

    function spin() {
      const elapsedTime = Date.now() - startTime;
      const progress = Math.min(elapsedTime / totalSpinTime, 1);
      const easedProgress = easeOutQuart(progress);
      const currentRotation = totalRotations * 2 * Math.PI * easedProgress;

      drawWheel(currentRotation);

      // Rotate the button in the opposite direction
      spinButton.style.transform = `translate(-50%, -50%) rotate(${-currentRotation}rad)`;

      if (progress < 1) {
        requestAnimationFrame(spin);
      } else {
        isSpinning = false;
        spinButton.disabled = false;
        spinButton.style.transform = 'translate(-50%, -50%) rotate(0deg)';
        const winningIndex = items.length - 1 - Math.floor((currentRotation / (2 * Math.PI)) % 1 * items.length);
        showWinnerPopup(items[winningIndex]);
      }
    }

    spin();
  }

  function playWinnerSound() {
    setTimeout(() => {
      winnerSound.play();
    }, 200);
  }

  function playOptionSound() {
    optionSound.currentTime = 0;
    optionSound.play().catch(error => console.error('Error playing option sound:', error));
  }

  function showWinnerPopup(winner) {
    winnerText.textContent = winner;
    winnerPopup.classList.remove('hidden');
    playWinnerSound();
  }

  function resizeWheel() {
    const containerWidth = wheelContainer.offsetWidth;
    wheelCanvas.width = containerWidth;
    wheelCanvas.height = containerWidth;
    drawWheel();
  }

  window.addEventListener('resize', resizeWheel);
  resizeWheel();
  drawWheel();
  spinButton.addEventListener('click', spinWheel);

  // Listen for item updates
  document.addEventListener('itemsUpdated', (e) => {
    items = e.detail;
    longestOption = items.reduce((a, b) => a.length > b.length ? a : b, '');
    drawWheel();
  });

  // Close popup when clicking anywhere
  document.addEventListener('click', (e) => {
    if (!winnerPopup.classList.contains('hidden')) {
      winnerPopup.classList.add('hidden');
    }
  });
</script>